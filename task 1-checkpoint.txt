{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "72fdb171-f06f-45c7-8dfc-261642628ba8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8125f8a7-4910-47a1-b340-8ce9c68f9c62",
   "metadata": {},
   "outputs": [],
   "source": [
    "#define a job description and a candidate's resume\n",
    "job_description =\"Experienced software engineer with a focus on Python and machine learning.\"\n",
    "resume = \"I am software engineer with 4 years of experience in python and machine learning. i have a bachelor's degree in computer science.\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "308bd775-d808-4730-94dd-284721792951",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a function to preprocess text data \n",
    "def preprocess_text(text):\n",
    "    #tokenize the text into words \n",
    "    words = word_tokenize(text.lower())\n",
    "\n",
    "    # remove stop words and punctuation \n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    words= [word for word in words if word.isalnum() and word not in stop_words]\n",
    "    # lemmatize the words \n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    words=[lemmatizer.lemmatize(word) for word in words]\n",
    "\n",
    "    return words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "99810f57-b575-4534-a523-222624b71391",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to C:\\Users\\Shubhangi\n",
      "[nltk_data]     Srivastava\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers\\punkt.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "048a46d9-66cc-4cdc-abed-b3cf817bad26",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to C:\\Users\\Shubhangi\n",
      "[nltk_data]     Srivastava\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Unzipping corpora\\stopwords.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9ff10f48-818b-40ba-a747-7e2e0bd2396a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to C:\\Users\\Anamika\n",
      "[nltk_data]     Tiwari\\AppData\\Roaming\\nltk_data...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7d9e127b-9906-4e13-aa59-5300c22a2d23",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocess the job description and resume\n",
    "job_words = preprocess_text(job_description)\n",
    "resume_words = preprocess_text(resume)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "23d452f6-464c-4222-978f-fbe80e2eb1e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Job Skills: {'learning', 'python', 'machine'}\n",
      "Resume Skills: {'learning', 'python', 'machine'}\n"
     ]
    }
   ],
   "source": [
    "# Find the relevant skills in the job description and the resume\n",
    "#job_skills = set([word for word in job_words if word in ['python','machine','learning']])\n",
    "#resume_skills = set([word for word in resume_words if word in ['pyhton','machine','learning']])\n",
    "# Sample job keywords\n",
    "job_words = ['python', 'machine', 'learning', 'project', 'management']\n",
    "\n",
    "# Sample resume words\n",
    "resume_words = ['python', 'machine', 'learning', 'data', 'analysis']\n",
    "\n",
    "job_skills = set([word for word in job_words if word in ['python', 'machine', 'learning']])\n",
    "resume_skills = set([word for word in resume_words if word in ['python', 'machine', 'learning']])\n",
    "\n",
    "print(\"Job Skills:\", job_skills)\n",
    "print(\"Resume Skills:\", resume_skills)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e8c762d-0fde-4110-8931-216e353e858b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Match Score: 1.0\n"
     ]
    }
   ],
   "source": [
    "# calculate a match score between the job skills and resume skills \n",
    "match_score = len(resume_skills.intersection(job_skills)) / len(job_skills)\n",
    "print(\"Match Score:\", match_score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64e4af1c-92db-4607-afe6-7a72349e28dc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
